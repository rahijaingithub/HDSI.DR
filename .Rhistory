set.seed(i)
best_para = as.numeric(c(10, 5, 0.25, 2))
# Get the final model
res=HDSI.DR::fit_function(datatype=c("simulated"), param = list(seed =2, varnum = 15, setting= "Correlation", main_var=10, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50, var = "Mar"), seeder=i, ncomp=best_para[2], i_numb=2, k=best_para[1], effectsize=13, model_perf="None", coarse_FS = T, Fine_FS =T, summary_ci = best_para[3], strict_anova=F, semi_strict=F, varmax=best_para[4])
#print(res)
res
}, future.seed=T)
devtools::document()
res=future.apply::future_lapply(1:10, function(i){
cat(i,"")
set.seed(i)
best_para = as.numeric(c(10, 5, 0.25, 2))
# Get the final model
res=HDSI.DR::fit_function(datatype=c("simulated"), param = list(seed =2, varnum = 15, setting= "Correlation", main_var=10, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50, var = "Mar"), seeder=i, ncomp=best_para[2], i_numb=2, k=best_para[1], effectsize=13, model_perf="None", coarse_FS = T, Fine_FS =T, summary_ci = best_para[3], strict_anova=F, semi_strict=F, varmax=best_para[4])
#print(res)
res
}, future.seed=T)
devtools::document()
res=future.apply::future_lapply(1:10, function(i){
cat(i,"")
set.seed(i)
best_para = as.numeric(c(10, 5, 0.25, 2))
# Get the final model
res=HDSI.DR::fit_function(datatype=c("simulated"), param = list(seed =2, varnum = 15, setting= "Correlation", main_var=10, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50, var = "Mar"), seeder=i, ncomp=best_para[2], i_numb=2, k=best_para[1], effectsize=13, model_perf="None", coarse_FS = T, Fine_FS =T, summary_ci = best_para[3], strict_anova=F, semi_strict=F, varmax=best_para[4])
#print(res)
res
}, future.seed=T)
plan(multisession(workers = 1))
res=future.apply::future_lapply(1:10, function(i){
cat(i,"")
set.seed(i)
best_para = as.numeric(c(10, 5, 0.25, 2))
# Get the final model
res=HDSI.DR::fit_function(datatype=c("simulated"), param = list(seed =2, varnum = 15, setting= "Correlation", main_var=10, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50, var = "Mar"), seeder=i, ncomp=best_para[2], i_numb=2, k=best_para[1], effectsize=13, model_perf="None", coarse_FS = T, Fine_FS =T, summary_ci = best_para[3], strict_anova=F, semi_strict=F, varmax=best_para[4])
#print(res)
res
}, future.seed=T)
library(future)
plan(multisession(workers = 1))
res=future.apply::future_lapply(1:10, function(i){
cat(i,"")
set.seed(i)
best_para = as.numeric(c(10, 5, 0.25, 2))
# Get the final model
res=HDSI.DR::fit_function(datatype=c("simulated"), param = list(seed =2, varnum = 15, setting= "Correlation", main_var=10, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50, var = "Mar"), seeder=i, ncomp=best_para[2], i_numb=2, k=best_para[1], effectsize=13, model_perf="None", coarse_FS = T, Fine_FS =T, summary_ci = best_para[3], strict_anova=F, semi_strict=F, varmax=best_para[4])
#print(res)
res
}, future.seed=T)
devtools::document()
plan(multisession(workers = 10))
res=future.apply::future_lapply(1:10, function(i){
cat(i,"")
set.seed(i)
best_para = as.numeric(c(10, 5, 0.25, 2))
# Get the final model
res=HDSI.DR::fit_function(datatype=c("simulated"), param = list(seed =2, varnum = 15, setting= "Correlation", main_var=10, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50, var = "Mar"), seeder=i, ncomp=best_para[2], i_numb=2, k=best_para[1], effectsize=13, model_perf="None", coarse_FS = T, Fine_FS =T, summary_ci = best_para[3], strict_anova=F, semi_strict=F, varmax=best_para[4])
#print(res)
res
}, future.seed=T)
res
devtools::document()
res=future.apply::future_lapply(1:10, function(i){
cat(i,"")
set.seed(i)
best_para = as.numeric(c(10, 5, 0.25, 2))
# Get the final model
res=HDSI.DR::fit_function(datatype=c("simulated"), param = list(seed =2, varnum = 15, setting= "Correlation", main_var=10, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50, var = "Mar"), seeder=i, ncomp=best_para[2], i_numb=2, k=best_para[1], effectsize=13, model_perf="None", coarse_FS = T, Fine_FS =T, summary_ci = best_para[3], strict_anova=F, semi_strict=F, varmax=best_para[4], kmean_type = "Normal")
#print(res)
res
}, future.seed=T)
fit_function2()
fit_function2
res=future.apply::future_lapply(1:10, function(i){
cat(i,"")
set.seed(i)
best_para = as.numeric(c(10, 5, 0.25, 2))
# Get the final model
res=HDSI.DR::fit_function2(datatype=c("simulated"), param = list(seed =2, varnum = 15, setting= "Correlation", main_var=10, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50, var = "Mar"), seeder=i, ncomp=best_para[2], i_numb=2, k=best_para[1], effectsize=13, model_perf="None", coarse_FS = T, Fine_FS =T, summary_ci = best_para[3], strict_anova=F, semi_strict=F, varmax=best_para[4], kmean_type = "Normal")
#print(res)
res
}, future.seed=T)
devtools::document()
res=future.apply::future_lapply(1:10, function(i){
cat(i,"")
set.seed(i)
best_para = as.numeric(c(10, 5, 0.25, 2))
# Get the final model
res=HDSI.DR::whatthe(datatype=c("simulated"), param = list(seed =2, varnum = 15, setting= "Correlation", main_var=10, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50, var = "Mar"), seeder=i, ncomp=best_para[2], i_numb=2, k=best_para[1], effectsize=13, model_perf="None", coarse_FS = T, Fine_FS =T, summary_ci = best_para[3], strict_anova=F, semi_strict=F, varmax=best_para[4], kmean_type = "Normal")
#print(res)
res
}, future.seed=T)
res=whatthe(datatype=c("simulated"), param = list(seed =2, varnum = 15, setting= "Correlation", main_var=10, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50, var = "Mar"), seeder=i, ncomp=best_para[2], i_numb=2, k=best_para[1], effectsize=13, model_perf="None", coarse_FS = T, Fine_FS =T, summary_ci = best_para[3], strict_anova=F, semi_strict=F, varmax=best_para[4], kmean_type = "Normal")
res=future.apply::future_lapply(1:10, function(i){
cat(i,"")
set.seed(i)
best_para = as.numeric(c(10, 5, 0.25, 2))
# Get the final model
res=whatthe(datatype=c("simulated"), param = list(seed =2, varnum = 15, setting= "Correlation", main_var=10, var_effect=c(0.5, -0.5), correlation_var=15, correlation_val=5, high_dim=T, train_sample=50, var = "Mar"), seeder=i, ncomp=best_para[2], i_numb=2, k=best_para[1], effectsize=13, model_perf="None", coarse_FS = T, Fine_FS =T, summary_ci = best_para[3], strict_anova=F, semi_strict=F, varmax=best_para[4], kmean_type = "Normal")
#print(res)
res
}, future.seed=T)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
match("inter", c("name", "inter", "intercept", "xinter.."))
grep("inter", c("name", "inter", "intercept", "xinter.."))
which("inter" %in% c("name", "inter", "intercept", "xinter.."))
which(c("name", "inter", "intercept", "xinter..") %in% "inter")
devtools::document()
devtools::document()
devtools::document()
grep("inter", c("name", "inter", "Intercept", "xinter.."))
grep("inter|Inter", c("name", "inter", "Intercept", "xinter.."))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
#'@export
tn_table = function(varnum=15, vartype= c("int", "mar")){
marvar = sapply(1:varnum, function(i) gsub(" ", "",paste("X",i)))
Varlist = data.frame(rep(1,varnum))
return(marvar)
}
tn_table()
#'@export
tn_table = function(varnum=15, vartype= c("int", "mar")){
marvar = sapply(1:varnum, function(i) gsub(" ", "",paste("X",i)))
Varlist = data.frame(rep(1,varnum))
return(Varlist)
}
tn_table()
#'@export
tn_table = function(varnum=15, vartype= c("int", "mar")){
marvar = sapply(1:varnum, function(i) gsub(" ", "",paste("X",i)))
Varlist = cbind(rep(1,varnum))
return(Varlist)
}
tn_table()
do.call(cbind, rep(1,15))
#'@export
tn_table = function(varnum=15, vartype= c("int", "mar")){
marvar = sapply(1:varnum, function(i) gsub(" ", "",paste("X",i)))
# Varlist =
return(marvar)
}
tn_table()
tn_table()*tn_table()
paste(tn_table(),tn_table())
devtools::document()
rm(list = c("tn_table"))
var_combination(listofvar = tn_table())
var_combination(listofvar = tn_table(), r=2)
#'@export
tn_table = function(varnum=15, vartype= c("int", "mar")){
marvar = sapply(1:varnum, function(i) gsub(" ", "",paste("X",i)))
intlist = var_combination(listofvar = marvar, r=2)
intlist= sapply(intlist, function(x) paste(x, collapse = "_"))
return(intlist)
}
tn_table()
#'@export
tn_table = function(varnum=15, vartype= c("int", "mar")){
# Create list of variables
{
marvar = sapply(1:varnum, function(i) gsub(" ", "",paste("X",i)))
intlist = var_combination(listofvar = marvar, r=2)
intlist= sapply(intlist, function(x) paste(x, collapse = "_"))
org_intlist = var_organise(inputlist = intlist)
varlist = union(marvar, org_intlist)
}
return(varlist)
}
tn_table()
table(tn_table())
sampletable = table(tn_table())
devtools::document()
names(sampletable)
#'@export
freq_table = function(tablelist, varlist){
df= data.frame(var= names(tablelist), freq=as.numeric(tablelist), stringsAsFactors = F)
return(df)
}
freq_table(tablelist = sampletable, varlist = names(sampletable))
#'@export
freq_table = function(tablelist, varlist){
df= data.frame(var= names(tablelist), freq=as.numeric(tablelist), stringsAsFactors = F)
other_var = setdiff(varlist, names(tablelist))
len_othervar = length(other_var)
df[(nrow(df)+1):(nrow(df)+len_othervar),] = c(other_var, rep(0,len_othervar))
return(df)
}
sampletable = table(tn_table()[1:30])
devtools::document()
rm(list = c("freq_table", "tn_table"))
devtools::document()
sampletable = table(tn_table()[1:30])
freq_table(tablelist = sampletable, varlist = tn_table())
devtools::document()
freq_table(tablelist = sampletable, varlist = tn_table())
devtools::document()
varlist = sapply(1:varnum, function(i) gsub(" ", "",paste("X",i)))
varlist = sapply(1:10, function(i) gsub(" ", "",paste("X",i)))
sample(varlist,5)
sample(varlist,5)
freq_list= lapply(1:5, function(x) {varname= sample(varlist, 5); table(varname)})
freq_list
tn_table(frequencylist = freq_list, freq_name = c("a", "b", "c", "d"))
tn_table(frequencylist = freq_list, freq_name = c("a", "b", "c"))
tn_table(frequencylist = freq_list, freq_name = c("a", "b", "c", "d", "e"))
df = tn_table(frequencylist = freq_list, freq_name = c("a", "b", "c", "d", "e"))
longdf = melt(df, id.vars = c("var","vartype"))
longdf = reshape2::melt(df, id.vars = c("var","vartype"))
longdf
ggplot2::ggplot(longdf, aes(variable, value, colour = vartype)) +
geom_boxplot() +
labs(title="Target and Noise variable density distribution",x= "Variable Type", y = "Frequency") +
theme_bw()
devtools::document()
ggplot2::ggplot(longdf, ggplot2::aes(variable, value, colour = vartype)) +
geom_boxplot() +
labs(title="Target and Noise variable density distribution",x= "Variable Type", y = "Frequency") +
theme_bw()
ggplot2::ggplot(longdf, ggplot2::aes(variable, value, colour = vartype)) +
ggplot2::geom_boxplot()
ggplot2::ggplot(longdf, ggplot2::aes(variable, value, colour = vartype)) +
ggplot2::geom_point() +
ggplot2::labs(title="Target and Noise variable density distribution",x= "Variable Type", y = "Frequency") +
ggplot2::theme_bw()
ggplot2::ggplot(longdf, ggplot2::aes(variable, value)) +
ggplot2::geom_point(ggplot2::aes(shape = vartype, colour = vartype)) +
ggplot2::labs(title="Target and Noise variable density distribution",x= "Variable Type", y = "Frequency")
ggplot2::ggplot(longdf, ggplot2::aes(variable, value)) +
ggplot2::geom_point(ggplot2::aes(shape = vartype, colour = vartype)) +
ggplot2::labs(title="Target and Noise variable density distribution",x= "Variable Type", y = "Frequency") +
ggplot2::scale_shape_manual(values=c(3, 16))+
ggplot2::scale_color_manual(values=c('#999999','#E69F00'))+
ggplot2::theme_bw()
ggplot2::ggplot(longdf, ggplot2::aes(variable, value)) +
ggplot2::geom_point(ggplot2::aes(shape = vartype, colour = vartype)) +
ggplot2::labs(title="Target and Noise variable density distribution",x= "Variable Type", y = "Frequency") +
ggplot2::scale_shape_manual(values=c(2, 16))+
ggplot2::scale_color_manual(values=c('#999999','#E69F00'))+
ggplot2::theme_bw()
ggplot2::ggplot(longdf, ggplot2::aes(variable, value)) +
ggplot2::geom_point(ggplot2::aes(shape = vartype, colour = vartype, size = vartype)) +
ggplot2::labs(title="Target and Noise variable density distribution",x= "Variable Type", y = "Frequency") +
ggplot2::scale_shape_manual(values=c(2, 16))+
ggplot2::scale_color_manual(values=c('#999999','#E69F00'))+
ggplot2::theme_bw()
ggplot2::ggplot(longdf, ggplot2::aes(variable, value)) +
ggplot2::geom_point(ggplot2::aes(shape = vartype, colour = vartype, size = vartype)) +
ggplot2::labs(title="Target and Noise variable density distribution",x= "Variable Type", y = "Frequency") +
ggplot2::scale_shape_manual(values=c(2, 16))+
ggplot2::scale_color_manual(values=c('#999999','#E69F00'))+
ggplot2::scale_size_manual(values=c(2,1))+
ggplot2::theme_bw()
ggplot2::ggplot(longdf, ggplot2::aes(variable, value)) +
ggplot2::geom_point(ggplot2::aes(shape = vartype, colour = vartype, size = vartype)) +
ggplot2::labs(title="Target and Noise variable density distribution",x= "Variable Type", y = "Frequency") +
ggplot2::scale_shape_manual(values=c(2, 16))+
ggplot2::scale_color_manual(values=c('#999999','#E69F00'))+
ggplot2::scale_size_manual(values=c(4,2))+
ggplot2::theme_bw()
ggplot2::ggplot(longdf, ggplot2::aes(variable, value)) +
ggplot2::geom_point(ggplot2::aes(shape = vartype, colour = vartype, size = vartype)) +
ggplot2::geom_boxplot(ggplot2::aes(colour = vartype))+
ggplot2::labs(title="Target and Noise variable density distribution",x= "Variable Type", y = "Frequency") +
ggplot2::scale_shape_manual(values=c(2, 16))+
ggplot2::scale_color_manual(values=c('#999999','#E69F00'))+
ggplot2::scale_size_manual(values=c(4,2))+
ggplot2::theme_bw()
ggplot2::ggplot(longdf, ggplot2::aes(variable, value)) +
ggplot2::geom_point(ggplot2::aes(shape = vartype, colour = vartype, size = vartype)) +
ggplot2::geom_boxplot()+
ggplot2::labs(title="Target and Noise variable density distribution",x= "Variable Type", y = "Frequency") +
ggplot2::scale_shape_manual(values=c(2, 16))+
ggplot2::scale_color_manual(values=c('#999999','#E69F00'))+
ggplot2::scale_size_manual(values=c(4,2))+
ggplot2::theme_bw()
ggplot2::ggplot(longdf, ggplot2::aes(variable, value)) +
# ggplot2::geom_point(ggplot2::aes(shape = vartype, colour = vartype, size = vartype)) +
ggplot2::geom_boxplot()+
ggplot2::ggplot(longdf, ggplot2::aes(variable, value)) +
# ggplot2::geom_point(ggplot2::aes(shape = vartype, colour = vartype, size = vartype)) +
ggplot2::geom_boxplot()
str(longdf)
ggplot2::ggplot(longdf, ggplot2::aes(variable, as.numeric(value))) +
# ggplot2::geom_point(ggplot2::aes(shape = vartype, colour = vartype, size = vartype)) +
ggplot2::geom_boxplot()
ggplot2::ggplot(longdf, ggplot2::aes(variable, as.numeric(value))) +
ggplot2::geom_point(ggplot2::aes(shape = vartype, colour = vartype, size = vartype)) +
ggplot2::geom_boxplot()+
ggplot2::labs(title="Target and Noise variable density distribution",x= "Variable Type", y = "Frequency") +
ggplot2::scale_shape_manual(values=c(2, 16))+
ggplot2::scale_color_manual(values=c('#999999','#E69F00'))+
ggplot2::scale_size_manual(values=c(4,2))+
ggplot2::theme_bw()
ggplot2::ggplot(longdf, ggplot2::aes(variable, as.numeric(value))) +
ggplot2::geom_point(ggplot2::aes(shape = vartype, colour = vartype, size = vartype)) +
ggplot2::geom_boxplot(ggplot2::aes(colour=vartype))+
ggplot2::labs(title="Target and Noise variable density distribution",x= "Variable Type", y = "Frequency") +
ggplot2::scale_shape_manual(values=c(2, 16))+
ggplot2::scale_color_manual(values=c('#999999','#E69F00'))+
ggplot2::scale_size_manual(values=c(4,2))+
ggplot2::theme_bw()
devtools::document()
l = list(a=1, b=2, c=3)
l
unlist(l)
varname = c("a","b","c")
l[varname] = lapply(1:3, function(x) x)
l
g[varname] = lapply(1:3, function(x) x)
g = list()
g[varname] = lapply(1:3, function(x) x)
g
devtools::document()
devtools::document()
devtools::document()
df = read_excel("D:/MegaSync/MEGAsync/UHN/Theory 1/Dimensionality Reduction/HDSI_PLS_results.xlsx", sheet = "df")
devtools::document()
devtools::document()
df = read_excel("D:/MegaSync/MEGAsync/UHN/Theory 1/Dimensionality Reduction/HDSI_PLS_results.xlsx", sheet = "df")
df = readxl::read_excel("D:/MegaSync/MEGAsync/UHN/Theory 1/Dimensionality Reduction/HDSI_PLS_results.xlsx", sheet = "df")
dftolist(df=df)
dftolist(df=data.frame(df)0
dftolist(df=data.frame(df))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
-(-2*0.2904194 + (2*10/50))
-(-0.2904194 + (10/50))
-(-0.29 + (10/50))
-(-0.29 + (12/50))
-(-0.29 + (9/50))
-(-0.2804194 + (10/50))
-(-0.2804194*2 + 2*(12/50))
-(-0.2804194*2 + 2*(15/50))
#' The functionS in this file prepare the dataset for the modeling
#'
#'
#'@export
# Generate the artificial dataset
dataset=function(varnum, setting="No_Correlation", var=c("Mar", "No_Mar", "No_Var"), seed=2, main_var=10, var_effect=0.5, correlation_var=15, correlation_val=5, high_dim=T, train_sample=500){
# Create the Covariance Matrix
Sigma=matrix(rep(0,varnum), nrow=varnum, ncol=varnum, byrow=F)
if(high_dim){
for(i in 1:varnum){
for(j in 1:varnum){
if(i==j){Sigma[i,j]=10}
else if(i<=correlation_var & j<=correlation_var & setting == "Correlation"){Sigma[i,j]=Sigma[j,i]=correlation_val}
else{Sigma[i,j]=Sigma[j,i]=1}
}
}
}
else{
for(i in 1:varnum){Sigma[i,i]=10}
# Correlation Settings
if(setting=="Correlation"){
Sigma[1,2]=3;Sigma[1,3]=3;Sigma[1,4]=6;Sigma[1,5]=6
Sigma[2,1]=3;Sigma[3,1]=3;Sigma[4,1]=6;Sigma[5,1]=6
Sigma[2,3]=3;Sigma[2,4]=2;Sigma[2,5]=1
Sigma[3,2]=3;Sigma[4,2]=2;Sigma[5,2]=1
Sigma[3,4]=2;Sigma[3,5]=1
Sigma[4,3]=2;Sigma[5,3]=1
Sigma[4,5]=1
Sigma[5,4]=1
}
}
# Create the input dataset
#print(Sigma)
set.seed(seed)
ta=data.frame(MASS::mvrnorm(n = train_sample+500, rep(0, varnum), Sigma/10))
variablelist=list()
for(i in 1:varnum){
variablelist[[i]]=gsub(" ", "",paste("X",i))
ta[,i]=mosaic::zscore(ta[,i])
}
variablelist=unlist(variablelist)
# Create the outcome Variable
intercept=1
if(high_dim){
betas = c(rep(var_effect,(2*main_var)-1))
beta_value = betas[1:((2*main_var)-1)]
if(var=="Mar"){beta_value=beta_value*rep(1,(2*main_var)-1)}
else if(var=="No_Mar"){beta_value=beta_value*c(rep(0,2), rep(1,main_var-2), rep(1,main_var-1))}
else if(var=="No_Var"){beta_value=beta_value*c(rep(0,main_var), rep(0,main_var-1))}
else if(var=="only_int"){beta_value=beta_value*c(rep(0,main_var), rep(1,main_var-1))}
else {beta_value = beta_value*c(rep(1,main_var), rep(0,main_var-1))}
# Generate theinteraction term
mar_var= paste(c(names(ta)[1:main_var]), collapse = "+")
int_var= paste(names(ta)[1:(main_var-1)],"*" , names(ta)[2:main_var], collapse = " + ")
f = as.formula(paste("~",mar_var ," +" , int_var))
#print(f)
main_mat = model.matrix(f, ta)
# Get Outcome
ta$y = main_mat %*% c(intercept, beta_value) + rnorm(n=train_sample+500, mean=0, sd=0.25)
}
else{
if(var=="Mar"){beta_a=1; beta_b=1}
else if(var=="No_Mar"){beta_a=0; beta_b=1}
else{beta_a=0; beta_b=0}
b1=0.2*beta_a
b2=0.3*beta_a
b3=0.4*beta_b
b4=0.3*beta_b
ta$y= intercept + (b1*ta$X1) + (b2*ta$X2) + (b3*ta$X3) + (b4*ta$X1*ta$X2) + rnorm(n=train_sample+500, mean=0, sd=0.25)
}
set.seed(2)
index=sample(1:nrow(ta), train_sample, replace = F)
traindf=ta[index,]
validationdf=ta[-index,]
return(list(train=traindf,test=validationdf))
}
devtools::document()
rm(list = c("dataset"))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
stringi::stri_split(c("X1", "x1_x2"))
stringi::stri_split(c("X1", "x1_x2"), "_")
stringi::stri_split(c("X1", "x1_x2"), "_", "fixed")
strsplit(c("x1", "x1_x2"),"_")
c("x2","x1_x2" %in% "x1")
"x1" %in% c("x2","x1_x2")
c("x2","x1_x2") %in% "x1"
devtools::document()
install.packages("usethis")
library(usethis)
